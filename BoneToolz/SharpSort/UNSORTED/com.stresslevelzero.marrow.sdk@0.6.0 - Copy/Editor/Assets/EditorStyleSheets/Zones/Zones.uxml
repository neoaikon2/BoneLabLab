<ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="True">
    <Style src="project://database/Packages/com.stresslevelzero.marrow.sdk/Editor/Assets/EditorStyleSheets/MarrowStyles.uss?fileID=7433441132597879392&amp;guid=7ebe2475af85eae4ca7aeb90fab90275&amp;type=3#MarrowStyles" />
    <ui:VisualElement name="rootContainer">
        <ui:Foldout text="Usage Info" name="usageInfo" value="false">
            <ui:Label display-tooltip-when-elided="true" text="Zones are trigger colliders that define areas that manage the dynamic loading and unloading of resources or the triggering of events.  Zones with Zone Links provide activation permissions and dynamically track the position and status of all entities within them.  As a player enters a linked Zone with the Player Activator Tag, all entities within it and all Zones linked to that zone are triggered.  This ensures that all entities and geometry surrounding the player are loaded and ready for use.  Any zones and their entities that are &lt;i&gt;not&lt;/i&gt; linked to the player&apos;s current zone are frozen in a dormant state, using almost no resources.\n&#10;When creating Zones with Zone Links, the best practice is to slightly inset the Zone&apos;s collider bounds from its surrounding geometry.  This ensures that any entities tracked by the Zone do not risk being detected or hit through walls.  While trigger colliders of any type are supported, including convex mesh colliders for unique or odd shapes that would not be easily handled by the usual primitive collider shapes, Box Colliders are the most common Zone type.  The Zone Creation and Linking Overlay tool provides an Inset parameter that will fit a Zone to the specified geometry and then shrink the Zone&apos;s collider by the inset value to ensure this best practice can be easily followed.\n&#10;When linking zones, the best practice is to use line of sight to avoid entities or geometry suddenly activating or disappearing in front of the player.  Line of sight considerations should account for the player&apos;s ability to jump, climb and move themselves in unexpected ways, like using the Nimbus Gun to fly around the level.\n&#10;Zones also provide trigger colliders for Zone Events, which also have activation permissions, but do not manage the resources within them and do not need to follow any of the Zone Linking considerations.  See the Zone Event&apos;s Usage Info documentation for more details.\n&#10;In addition to tracking entities and triggering events, the Zone system forms the backbone of the Scene Chunk dynamic multi-scene streaming system, which allows level designers to carve a large level into several smaller scenes and dynamically load and unload them based on the player&apos;s position.  Zones define the areas that trigger which scenes are loaded and unloaded around the player.  This system provides massive performance and fidelity enhancements that are covered in the Scene Chunk documentation.&#10;" name="zonesIntro" style="white-space: normal; font-size: 12px;" />
            <ui:Button text="MarrowSDK Documentation - Zones" display-tooltip-when-elided="true" name="marrowDocsButton" binding-path="marrowDocsButton" tooltip="Open the MarrowSDK Documentation in the default web browser." style="margin-top: 10px; width: auto; align-items: auto; justify-content: flex-start;" />
        </ui:Foldout>
        <ui:VisualElement name="validationFeedback" style="visibility: visible; display: flex; margin-top: 10px;">
            <ui:IMGUIContainer name="imguiValidationContainer" />
        </ui:VisualElement>
        <ui:VisualElement name="fieldsContainer" />
        <ui:VisualElement name="imguiInspectorContainer" style="display: none;">
            <ui:Foldout text="Default IMGUI Inspector" name="imguiContainerFoldout" value="false" style="padding-top: 10px;">
                <ui:IMGUIContainer name="imguiInspector" />
            </ui:Foldout>
        </ui:VisualElement>
    </ui:VisualElement>
</ui:UXML>
